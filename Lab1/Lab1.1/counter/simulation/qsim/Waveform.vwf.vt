// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/11/2020 11:07:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr_n;
reg data0;
reg data1;
reg data2;
reg data3;
reg data4;
reg data5;
reg data6;
reg data7;
reg enable;
reg ld_n;
// wires                                               
wire output0;
wire output1;
wire output2;
wire output3;
wire output4;
wire output5;
wire output6;
wire output7;
wire rco;

// assign statements (if any)                          
counter i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr_n(clr_n),
	.data0(data0),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.data4(data4),
	.data5(data5),
	.data6(data6),
	.data7(data7),
	.enable(enable),
	.ld_n(ld_n),
	.output0(output0),
	.output1(output1),
	.output2(output2),
	.output3(output3),
	.output4(output4),
	.output5(output5),
	.output6(output6),
	.output7(output7),
	.rco(rco)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b0;
end 

// clr_n
initial
begin
	clr_n = 1'b0;
end 

// ld_n
initial
begin
	ld_n = 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
end 

// data0
initial
begin
	data0 = 1'b0;
end 

// data1
initial
begin
	data1 = 1'b0;
end 

// data2
initial
begin
	data2 = 1'b0;
end 

// data3
initial
begin
	data3 = 1'b0;
end 

// data4
initial
begin
	data4 = 1'b0;
end 

// data5
initial
begin
	data5 = 1'b0;
end 

// data6
initial
begin
	data6 = 1'b0;
end 

// data7
initial
begin
	data7 = 1'b0;
end 
endmodule

